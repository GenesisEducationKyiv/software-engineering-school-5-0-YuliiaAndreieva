services:
  gateway-service:
    build:
      context: .
      dockerfile: services/gateway/Dockerfile
    container_name: gateway-service
    ports:
      - "8080:8080"
    env_file:
        - services/gateway/.env
    depends_on:
      - weather-service
      - subscription-service
    networks:
      - weather-network

  email-service:
    build:
      context: .
      dockerfile: services/email/Dockerfile
    container_name: email-service
    ports:
      - "8081:8081"
      - "9091:9091"
    env_file:
      - services/email/.env
    depends_on:
      rabbitmq:
        condition: service_started
    networks:
      - weather-network

  subscription-service:
    build:
      context: .
      dockerfile: services/subscription/Dockerfile
    container_name: subscription-service
    ports:
      - "8082:8082"
      - "9093:9093"
    env_file:
      - services/subscription/.env
    depends_on:
      postgres:
        condition: service_healthy
      email-service:
        condition: service_started
      token-service:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - weather-network

  token-service:
    build:
      context: .
      dockerfile: services/token/Dockerfile
    container_name: token-service
    ports:
      - "8083:8083"
    env_file:
      - services/token/.env
    networks:
      - weather-network

  weather-service:
    build:
      context: .
      dockerfile: services/weather/Dockerfile
    container_name: weather-service
    ports:
      - "8084:8084"
      - "9092:9092"
    env_file:
      - services/weather/.env
    depends_on:
      - redis
    networks:
      - weather-network

  weather-broadcast-service:
    build:
      context: .
      dockerfile: services/weather-broadcast/Dockerfile
    container_name: weather-broadcast-service
    ports:
      - "8085:8085"
    env_file:
      - services/weather-broadcast/.env
    depends_on:
      - email-service
      - subscription-service
      - weather-service
    networks:
      - weather-network

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_DB=subscriptions
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - weather-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - weather-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - weather-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - weather-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./grafana-dashboard.json:/etc/grafana/provisioning/dashboards/weather-dashboard.json
    networks:
      - weather-network

volumes:
  postgres_data:
  grafana_data:

networks:
  weather-network:
    driver: bridge